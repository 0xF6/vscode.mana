scopeName: source.wave
uuid: acd10959-e561-4695-9d2a-c6133f52a163
fileTypes:
    - wave
name: "Wave Language"
patterns:
    - include: "#comments"
    - include: "#preprocessor"
    - include: "#operators"
    - include: "#numbers"
    - include: "#keywords"
    - include: "#strings"
    - include: "#interpolated-string"
    - include: "#storage-types"
    - include: "#storage-modifier"
    - include: "#backslash-escapes"
    - include: "#class-declaration"
    - include: "#typdef-declaration"
    - include: "#types"
    - include: "#literal"
repository:
    declarations:
        patterns:
            - include: "#type-declarations"
            - include: "#punctuation-semicolon"
    comments:
        patterns:
            - name: comment.line.double-slash.documentation.wave
              begin: '(?:^)(?>\s*)(\/\/[!\/]+)'
              beginCaptures:
                  "1": { name: punctuation.definition.comment.documentation.wave }
              end: '(?<=\n)(?<!\\\n)'
              patterns:
                  - { include: "#line_continuation_character" }
            - match: '(\/\*[!*]+(?=\s))(.+)([!*]*\*\/)'
              captures:
                  "1": { name: punctuation.definition.comment.begin.documentation.wave }
                  "2": { name: punctuation.definition.comment.end.documentation.wave }
              name: comment.block.documentation.wave
            - name: comment.block.documentation.wave
              begin: '((?>\s*)\/\*[!*]+(?:(?:\n|$)|(?=\s)))'
              beginCaptures:
                  "1": {  name: punctuation.definition.comment.begin.documentation.wave }
              end: '([!*]*\*\/)'
              endCaptures:
                  "1": { name: punctuation.definition.comment.end.documentation.wave }
            - match: '^\/\* =(\s*.*?)\s*= \*\/$\n?'
              captures:
                  "1": { name: meta.toc-list.banner.block.c }
              name: comment.block.banner.wave
            - name: comment.block.wave
              begin: '(\/\*)'
              beginCaptures:
                  "1": { name: punctuation.definition.comment.begin.wave }
              end: '(\*\/)'
              endCaptures:
                  "1": { name: punctuation.definition.comment.end.wave }
            - match: '^\/\/ =(\s*.*?)\s*=$\n?'
              captures:
                  "1": { name: meta.toc-list.banner.line.wave }
              name: comment.line.banner.wave
            - begin: '((?:^[ \t]+)?)(?=\/\/)'
              beginCaptures:
                  "1": { name: punctuation.whitespace.comment.leading.wave }
              end: '(?!\G)'
    preprocessor:
        begin: '^\s*((#)\s*(use|load))\b\s*'
        beginCaptures:
            "1": 
              name: punctuation.separator.hash.wave
        end: '(?=(?://|/\*))|(?<!\\)(?=\n)'
        name: meta.preprocessor.wave
    operators:
        patterns:
            - match: '(?<![\w$])(sizeof)(?![\w$])'
              name: keyword.operator.sizeof.wave
            - match: "--"
              name: keyword.operator.decrement.wave
            - match: \+\+
              name: keyword.operator.increment.wave
            - match: '%=|\+=|-=|\*=|(?<!\()/='
              name: keyword.operator.assignment.compound.wave
            - match: '&=|\^=|<<=|>>=|\|='
              name: keyword.operator.assignment.compound.bitwise.wave
            - match: "<<|>>"
              name: keyword.operator.bitwise.shift.wave
            - match: "!=|<=|>=|==|<|>"
              name: keyword.operator.comparison.wave
            - match: '&&|!|\|\|'
              name: keyword.operator.logical.wave
            - match: '&|\||\^|~'
              name: keyword.operator.wave
            - match: "="
              name: keyword.operator.assignment.wave
            - match: '%|\*|/|-|\+'
              name: keyword.operator.wave
    keywords:
        patterns:
            - name: keyword.control.wave
              match: '(?<!\.)\b(nocontrol|global|using|auto|const|if|else|while|do|body|for|is|in|gc|return|fail|operation)\b'
            - name: keyword.control.core.wave
              match: '(?<!\.)\b(struct|record|union)\b'
    storage-modifier:
        patterns:
            - name: storage.modifier
              match: '\b(gc|new|public|protected|internal|private|static|readonly|const|extern|auto|extensions)\b'
    class-declaration:
        begin: \b(class)\s+
        beginCaptures:
            "1":
                name: keyword.other.class.wave
        end: '(?<=\})'
        patterns:
            - include: "#comment"
            - name: entity.name.type.class.wave
              match: "@?[_[:alpha:]][_[:alnum:]]*"
            - include: "#punctuation-accessor"
            - begin: '\{'
              beginCaptures:
                  "0": { name: punctuation.curlybrace.open.wave }
              end: '\}'
              endCaptures:
                  "0": { name: punctuation.curlybrace.close.wave }
              patterns:
                  - include: "#class-or-struct-members"
                  - include: "#comment"
    typdef-declaration:
        begin: (\#typedef)\s+
        beginCaptures:
            "1":
                name: keyword.other.typedef.wave
        end: '(?<=\=)'
        patterns:
            - include: "#comment"
            - name: entity.name.type.class.wave
              match: "@?[_[:alpha:]][_[:alnum:]]*"
            - include: "#punctuation-accessor"
            - begin: '\{'
              beginCaptures:
                  "0": { name: punctuation.curlybrace.open.wave }
              end: '\}'
              endCaptures:
                  "0": { name: punctuation.curlybrace.close.wave }
              patterns:
                  - { include: "#punctuation-semicolon" }
    type-builtin:
        patterns:
          - include: "#types"
    types:
        patterns:
            - match: '(byte|float|double|bool|string|void|([ui|i](nt16|nt32|nt64)))\b'
              name: support.type.wave
            - match: '\b%?(invalid)\b'
              name: invalid.deprecated
    punctuation-hash:
        name: punctuation.separator.hash.wave
        match: "#"
    punctuation-comma:
        name: punctuation.separator.comma.wave
        match: ","
    punctuation-semicolon:
        name: punctuation.terminator.statement.wave
        match: ;
    punctuation-accessor:
        name: punctuation.accessor.wave
        match: \.
    type-name:
        patterns:
            - match: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(\:\:)'
              captures:
                  "1": { name: entity.name.type.alias.wave }
                  "2": { name: punctuation.separator.coloncolon.wave }
            - match: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(\.)'
              captures:
                  "1": { name: storage.type.wave }
                  "2": { name: punctuation.accessor.wave }
            - match: '(\.)\s*(@?[_[:alpha:]][_[:alnum:]]*)'
              captures:
                  "1": { name: punctuation.accessor.wave }
                  "2": { name: storage.type.wave }
            - name: storage.type.wave
              match: "@?[_[:alpha:]][_[:alnum:]]*"
    type-arguments:
        begin: "<"
        beginCaptures:
            "0":
                name: punctuation.definition.typeparameters.begin.wave
        end: ">"
        endCaptures:
            "0":
                name: punctuation.definition.typeparameters.end.wave
        patterns:
            - include: "#comment"
            - include: "#type"
            - include: "#punctuation-comma"
    line_continuation_character:
        patterns:
            - match: (\\)\n
              captures:
                  "1": { name: constant.character.escape.line-continuation.wave }
    backslash-escapes:
        match: "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )"
        name: constant.character.escape.wave
    strings:
        patterns:
            - begin: '"'
              beginCaptures:
                  "0": { name: punctuation.definition.string.begin.wave }
              end: '"'
              endCaptures:
                  "0": { name: punctuation.definition.string.end.wave }
              name: string.quoted.double.wave
              patterns:
                  - { include: "#string_escaped_char" }
                  - { include: "#string_placeholder" }
                  - { include: "#line_continuation_character" }
            - begin: "'"
              beginCaptures:
                  "0": { name: punctuation.definition.string.begin.wave }
              end: "'"
              endCaptures:
                  "0": { name: punctuation.definition.string.end.wave }
              name: string.quoted.single.wave
              patterns:
                  - { include: "#string_escaped_char" }
                  - { include: "#line_continuation_character" }
    interpolated-string:
        name: string.quoted.double.wave
        begin: '\$"'
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.wave
        end: '(")|((?:[^\\\n])$)'
        endCaptures:
            "1":
                name: punctuation.definition.string.end.wave
            "2":
                name: invalid.illegal.newline.wave
        patterns:
            - include: "#string-character-escape"
            - include: "#interpolation"   
    interpolation:
        name: meta.interpolation.wave
        begin: '(?<=[^\{]|^)((?:\{\{)*)(\{)(?=[^\{])'
        beginCaptures:
            "1":
                name: string.quoted.double.wave
            "2":
                name: punctuation.definition.interpolation.begin.wave
        end: '\}'
        endCaptures:
            "0":
                name: punctuation.definition.interpolation.end.wave
        patterns:
            - include: "#expression"
    expression:
        patterns:
            - include: "#literal"
            - include: "#identifier"
    identifier:
        name: variable.other.readwrite.wave
        match: "@?[_[:alpha:]][_[:alnum:]]*"
    literal:
        patterns:
            - include: "#boolean-literal"
            - include: "#null-literal"
            - include: "#numeric-literal"
            - include: "#char-literal"
            - include: "#string-literal"
            - include: "#verbatim-string-literal"
            - include: "#tuple-literal"
    boolean-literal:
        patterns:
            - name: constant.language.boolean.true.wave
              match: '(?<!\.)\btrue\b'
            - name: constant.language.boolean.false.wave
              match: '(?<!\.)\bfalse\b'
    null-literal:
        name: constant.language.null.wave
        match: '(?<!\.)\bnull\b'
    numeric-literal:
        patterns:
            - name: constant.numeric.hex.wave
              match: '\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
            - name: constant.numeric.binary.wave
              match: '\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
            - name: constant.numeric.decimal.wave
              match: '\b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\b'
            - name: constant.numeric.decimal.wave
              match: '\b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\b'
            - name: constant.numeric.decimal.wave
              match: '\b[0-9_]+(F|f|D|d|M|m)\b'
            - name: constant.numeric.decimal.wave
              match: '\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
    char-literal:
        name: string.quoted.single.wave
        begin: "'"
        beginCaptures:
            "0":
                name: punctuation.definition.char.begin.wave
        end: '(\'')|((?:[^\\\n])$)'
        endCaptures:
            "1":
                name: punctuation.definition.char.end.wave
            "2":
                name: invalid.illegal.newline.wave
        patterns:
            - include: "#char-character-escape"
    char-character-escape:
        name: constant.character.escape.wave
        match: '\\([''"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})'
    string-literal:
        name: string.quoted.double.wave
        begin: '(?<!@)"'
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.wave
        end: '(")|((?:[^\\\n])$)'
        endCaptures:
            "1":
                name: punctuation.definition.string.end.wave
            "2":
                name: invalid.illegal.newline.wave
        patterns:
            - include: "#string-character-escape"
    string-character-escape:
        name: constant.character.escape.wave
        match: '\\([''"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})'
    type:
        name: meta.type.wave
        patterns:
            - include: "#comment"
            - include: "#ref-modifier"
            - include: "#readonly-modifier"
            - include: "#type-builtin"
            - include: "#type-name"
            - include: "#type-arguments"
            - include: "#type-array-suffix"
    method-declaration:
        begin: "(?x)(?<return_type>(?<type_name>(?:(?:ref\s+(?:readonly\s+)?)?(?:(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)?(?<name_and_type_args>\g<identifier>\s*(?<type_args>\s*<(?:[^<>]|\g<type_args>)+>\s*)?)(?:\s*\.\s*\g<name_and_type_args>)* |(?<tuple>\s*\((?:[^\(\)]|\g<tuple>)+\)))(?:\s*\?\s*)?(?:\s*\[(?:\s*,\s*)*\]\s*)*))\s+)(?<interface_name>\g<type_name>\s*\.\s*)?(\g<identifier>)\s*(<([^<>]+)>)?\s*(?=\()"
        beginCaptures:
            "1":
                patterns:
                    - { include: "#type" }
            "7":
                patterns:
                    - { include: "#type" }
                    - { include: "#punctuation-accessor" }
            "8":
                name: entity.name.function.wave
            "9":
                patterns:
                    - { include: "#type-parameter-list" }
        end: '(?<=\})|(?=;)'
        patterns:
            - include: "#comment"
            - include: "#parenthesized-parameter-list"
            - include: "#generic-constraints"
            - include: "#expression-body"
            - include: "#block"
    class-or-struct-members:
        patterns:
            - include: "#comment"
            - include: "#storage-modifier"
            - include: "#type-declarations"
            - include: "#property-declaration"
            - include: "#field-declaration"
            - include: "#variable-initializer"
            - include: "#constructor-declaration"
            - include: "#destructor-declaration"
            - include: "#operator-declaration"
            - include: "#method-declaration"
            - include: "#punctuation-semicolon"