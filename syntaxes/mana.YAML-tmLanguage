scopeName: source.mana
uuid: acd10959-e561-4695-9d2a-c6133f52a163
fileTypes:
    - mana
name: "Mana Language"
patterns:
    - include: "#operation-declaration"
    - include: "#comment"
    - include: "#preprocessor"
    - include: "#class-declaration"
    - include: "#operators"
    - include: "#numbers"
    - include: "#keywords"
    - include: "#strings"
    - include: "#interpolated-string"
    - include: "#storage-types"
    - include: "#storage-modifier"
    - include: "#backslash-escapes"
    - include: "#union-declaration"
    - include: "#typdef-declaration"
    - include: "#types"
    - include: "#literal"
repository:
    declarations:
        patterns:
            - include: "#type-declarations"
            - include: "#punctuation-semicolon"
    comment:
        patterns:
            - name: comment.block.mana
              begin: '/\*'
              beginCaptures:
                  "0": { name: punctuation.definition.comment.mana }
              end: '\*/'
              endCaptures:
                  "0": { name: punctuation.definition.comment.mana }
            - begin: '(^\s+)?(?=//)'
              beginCaptures:
                  "1": { name: punctuation.whitespace.comment.leading.mana }
              end: "(?=$)"
              patterns:
                  - {
                        name: comment.block.documentation.mana,
                        begin: "(?<!/)///(?!/)",
                        beginCaptures:
                            {
                                "0":
                                    { name: punctuation.definition.comment.mana },
                            },
                        end: "(?=$)",
                        patterns: [{ include: "#xml-doc-comment" }],
                    }
                  - {
                        name: comment.line.double-slash.mana,
                        begin: "(?<!/)//(?:(?!/)|(?=//))",
                        beginCaptures:
                            {
                                "0":
                                    { name: punctuation.definition.comment.mana },
                            },
                        end: "(?=$)",
                    }
    preprocessor:
        match: '^\s*((#)\s*(use|space|load))\b\s*'
        name: meta.preprocessor.mana
    operators:
        patterns:
            - match: '(?<![\w$])(sizeof)(?![\w$])'
              name: keyword.operator.sizeof.mana
            - match: "--"
              name: keyword.operator.decrement.mana
            - match: \+\+
              name: keyword.operator.increment.mana
            - match: '%=|\+=|-=|\*=|(?<!\()/='
              name: keyword.operator.assignment.compound.mana
            - match: '&=|\^=|<<=|>>=|\|='
              name: keyword.operator.assignment.compound.bitwise.mana
            - match: "<<|>>"
              name: keyword.operator.bitwise.shift.mana
            - match: "!=|<=|>=|==|<|>"
              name: keyword.operator.comparison.mana
            - match: '&&|!|\|\|'
              name: keyword.operator.logical.mana
            - match: '&|\||\^|~'
              name: keyword.operator.mana
            - match: "="
              name: keyword.operator.assignment.mana
            - match: '%|\*|/|-|\+'
              name: keyword.operator.mana
    keywords:
        patterns:
            - name: keyword.control.mana
              match: '(?<!\.)\b(global|char|this|base|using|auto|const|if|else|while|do|body|for|is|in|return|fail)\b'
            - name: keyword.control.core.mana
              match: '(?<!\.)\b(struct|record|union)\b'
    storage-modifier:
        patterns:
            - name: storage.modifier
              match: '\b(gc|new|delete|native|virtual|getter|setter|public|special|protected|internal|private|static|readonly|const|extern|auto|extensions)\b'
    union-declaration:
        begin: \b(union)\s+
        beginCaptures:
            "1":
                name: keyword.other.union.mana
        end: '(?<=\})'
        patterns:
            - include: "#comment"
            - name: entity.name.type.union.mana
              match: "@?[_[:alpha:]][_[:alnum:]]*"
            - include: "#punctuation-accessor"
            - begin: '\{'
              beginCaptures:
                  "0": { name: punctuation.curlybrace.open.mana }
              end: '\}'
              endCaptures:
                  "0": { name: punctuation.curlybrace.close.mana }
              patterns:
                  - include: "#comment"
                  - include: "#punctuation-semicolon"
                  - include: "#operation-declaration"
                  - include: "#comment"
                  - include: "#field-declaration"
    class-declaration:
        begin: \b(class|struct)\s+
        beginCaptures:
            "1":
                name: keyword.other.class.mana
        end: '(?<=\})'
        patterns:
            - include: "#comment"
            - name: entity.name.type.class.mana
              match: "@?[_[:alpha:]][_[:alnum:]]*"
            - include: "#punctuation-accessor"
            - begin: '\{'
              beginCaptures:
                  "0": { name: punctuation.curlybrace.open.mana }
              end: '\}'
              endCaptures:
                  "0": { name: punctuation.curlybrace.close.mana }
              patterns:
                  - include: "#comment"
                  - include: "#field-declaration"
                  - include: "#indexer-declaration"
                  - include: "#punctuation-semicolon"
                  - include: "#operation-declaration"
                  - include: "#union-declaration"
                  - include: "#storage-modifier"
                  - include: "#method-declaration"
                  - include: "#attribute-section"
    indexer-declaration:
        begin: "(this)(?>\s?+)\[(.+)\](?>\s?+)\:(?>\s?+)(@?[_[:alpha:]][_[:alnum:]]*)"
        beginCaptures:
            "1": 
                name: keyword.control.mana
            "2":
                patterns:
                    - include: "#operation-argument-list"
            "3":
                name: entity.name.type
        end: "(?=;)"
        patterns:
            - name: entity.name.variable.field.mana
              match: "@?[_[:alpha:]][_[:alnum:]]*"
            - include: "#punctuation-comma"
            - include: "#comment"
            - include: "#variable-initializer"
            - include: "#class-or-struct-members"
            - include: "#literal"
    field-declaration:
        begin: "(@?[_[:alpha:]][_[:alnum:]]*)(?>\s?+)\:(?>\s?+)(@?[_[:alpha:]][_[:alnum:]]*)"
        beginCaptures:
            "1":
                name: entity.name.variable.field.mana
            "2":
                name: entity.name.type
        end: "(?=;)"
        patterns:
            - name: entity.name.variable.field.mana
              match: "@?[_[:alpha:]][_[:alnum:]]*"
            - include: "#punctuation-comma"
            - include: "#comment"
            - include: "#variable-initializer"
            - include: "#class-or-struct-members"
            - include: "#literal"
    method-declaration:
        begin: "(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)(?>\s?+)\(((?>.)+)?\)(?>\s?+)\:(?>\s?+)(@?[_[:alpha:]][_[:alnum:]]*)"
        beginCaptures:
            "1":
                name: entity.name.function.mana
            "2":
                patterns:
                    - include: "#operation-argument-list"
            "3":
                name: entity.name.type
        end: '(?<=\})|(?=;)'
        patterns:
            - include: "#comment"
            - include: "#parenthesized-parameter-list"
            - include: "#generic-constraints"
            - include: "#expression-body"
            - include: "#block"
    typdef-declaration:
        begin: (\#typedef)\s+
        beginCaptures:
            "1":
                name: keyword.other.typedef.mana
        end: '(?<=\=)'
        patterns:
            - include: "#comment"
            - name: entity.name.type.class.mana
              match: "@?[_[:alpha:]][_[:alnum:]]*"
            - include: "#punctuation-accessor"
            - begin: '\{'
              beginCaptures:
                  "0": { name: punctuation.curlybrace.open.mana }
              end: '\}'
              endCaptures:
                  "0": { name: punctuation.curlybrace.close.mana }
              patterns:
                  - { include: "#punctuation-semicolon" }
    block:
        begin: '\{'
        beginCaptures:
            "0":
                name: punctuation.curlybrace.open.mana
        end: '\}'
        endCaptures:
            "0":
                name: punctuation.curlybrace.close.mana
        patterns:
            - include: "#statement"
    statement:
        patterns:
            - include: "#comment"
            - include: "#while-statement"
            - include: "#do-statement"
            - include: "#for-statement"
            - include: "#foreach-statement"
            - include: "#if-statement"
            - include: "#else-part"
            - include: "#switch-statement"
            - include: "#goto-statement"
            - include: "#return-statement"
            - include: "#break-or-continue-statement"
            - include: "#throw-statement"
            - include: "#yield-statement"
            - include: "#await-statement"
            - include: "#try-statement"
            - include: "#checked-unchecked-statement"
            - include: "#lock-statement"
            - include: "#using-statement"
            - include: "#labeled-statement"
            - include: "#local-declaration"
            - include: "#block"
            - include: "#expression"
            - include: "#punctuation-semicolon"
    if-statement:
        begin: '(?<!\.)\b(if)\b\s*(?=\()'
        beginCaptures:
            "1":
                name: keyword.control.conditional.if.mana
        end: '(?<=\})|(?=;)'
        patterns:
            - begin: \(
              beginCaptures:
                  "0": { name: punctuation.parenthesis.open.mana }
              end: \)
              endCaptures:
                  "0": { name: punctuation.parenthesis.close.mana }
              patterns:
                  - { include: "#expression" }
            - include: "#statement"
    return-statement:
        begin: '(?<!\.)\b(return)\b'
        beginCaptures:
            "1":
                name: keyword.control.flow.return.mana
        end: "(?=;)"
        patterns:
            - include: "#ref-modifier"
            - include: "#expression"
    throw-statement:
        begin: '(?<!\.)\b(fail)([\w\W\d\D\s\n]+)(?=;)'
        beginCaptures:
            "1":
                name: keyword.control.flow.fail.mana
            "2":
                name: mana.expression
                patterns:
                  - { include: "#expression" }
        end: "(?=;)"
        patterns:
            - { include: "#expression" }
    type-builtin:
        patterns:
          - include: "#types"
    types:
        patterns:
            - match: '(byte|float|double|bool|string|void|([ui|i](nt16|nt32|nt64)))\b'
              name: support.type.mana
            - match: '\b%?(invalid)\b'
              name: invalid.deprecated
    punctuation-hash:
        name: punctuation.separator.hash.mana
        match: "#"
    punctuation-comma:
        name: punctuation.separator.comma.mana
        match: ","
    punctuation-semicolon:
        name: punctuation.terminator.statement.mana
        match: ;
    punctuation-accessor:
        name: punctuation.accessor.mana
        match: \.
    type-name:
        patterns:
            - match: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(\:\:)'
              captures:
                  "1": { name: entity.name.type.alias.mana }
                  "2": { name: punctuation.separator.coloncolon.mana }
            - match: '(@?[_[:alpha:]][_[:alnum:]]*)\s*(\.)'
              captures:
                  "1": { name: entity.name.type }
                  "2": { name: punctuation.accessor.mana }
            - match: '(\.)\s*(@?[_[:alpha:]][_[:alnum:]]*)'
              captures:
                  "1": { name: punctuation.accessor.mana }
                  "2": { name: entity.name.type }
            - name: entity.name.type
              match: "@?[_[:alpha:]][_[:alnum:]]*"
    type-arguments:
        begin: "<"
        beginCaptures:
            "0":
                name: punctuation.definition.typeparameters.begin.mana
        end: ">"
        endCaptures:
            "0":
                name: punctuation.definition.typeparameters.end.mana
        patterns:
            - include: "#comment"
            - include: "#type"
            - include: "#punctuation-comma"
    line_continuation_character:
        patterns:
            - match: (\\)\n
              captures:
                  "1": { name: constant.character.escape.line-continuation.mana }
    backslash-escapes:
        match: "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )"
        name: constant.character.escape.mana
    strings:
        patterns:
            - begin: '"'
              beginCaptures:
                  "0": { name: punctuation.definition.string.begin.mana }
              end: '"'
              endCaptures:
                  "0": { name: punctuation.definition.string.end.mana }
              name: string.quoted.double.mana
              patterns:
                  - { include: "#string_escaped_char" }
                  - { include: "#string_placeholder" }
                  - { include: "#line_continuation_character" }
            - begin: "'"
              beginCaptures:
                  "0": { name: punctuation.definition.string.begin.mana }
              end: "'"
              endCaptures:
                  "0": { name: punctuation.definition.string.end.mana }
              name: string.quoted.single.mana
              patterns:
                  - { include: "#string_escaped_char" }
                  - { include: "#line_continuation_character" }
    interpolated-string:
        name: string.quoted.double.mana
        begin: '\$"'
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.mana
        end: '(")|((?:[^\\\n])$)'
        endCaptures:
            "1":
                name: punctuation.definition.string.end.mana
            "2":
                name: invalid.illegal.newline.mana
        patterns:
            - include: "#string-character-escape"
            - include: "#interpolation"   
    interpolation:
        name: meta.interpolation.mana
        begin: '(?<=[^\{]|^)((?:\{\{)*)(\{)(?=[^\{])'
        beginCaptures:
            "1":
                name: string.quoted.double.mana
            "2":
                name: punctuation.definition.interpolation.begin.mana
        end: '\}'
        endCaptures:
            "0":
                name: punctuation.definition.interpolation.end.mana
        patterns:
            - include: "#expression"
    expression:
        patterns:
            - include: "#preprocessor"
            - include: "#comment"
            - include: "#checked-unchecked-expression"
            - include: "#typeof-or-default-expression"
            - include: "#nameof-expression"
            - include: "#throw-expression"
            - include: "#interpolated-string"
            - include: "#verbatim-interpolated-string"
            - include: "#this-or-base-expression"
            - include: "#conditional-operator"
            - include: "#expression-operators"
            - include: "#await-expression"
            - include: "#query-expression"
            - include: "#as-expression"
            - include: "#is-expression"
            - include: "#anonymous-method-expression"
            - include: "#object-creation-expression"
            - include: "#array-creation-expression"
            - include: "#anonymous-object-creation-expression"
            - include: "#invocation-expression"
            - include: "#member-access-expression"
            - include: "#element-access-expression"
            - include: "#cast-expression"
            - include: "#literal"
            - include: "#parenthesized-expression"
            - include: "#tuple-deconstruction-assignment"
            - include: "#initializer-expression"
            - include: "#identifier"
    identifier:
        name: variable.other.readwrite.mana
        match: "@?[_[:alpha:]][_[:alnum:]]*"
    literal:
        patterns:
            - include: "#boolean-literal"
            - include: "#null-literal"
            - include: "#numeric-literal"
            - include: "#char-literal"
            - include: "#string-literal"
            - include: "#verbatim-string-literal"
            - include: "#tuple-literal"
    boolean-literal:
        patterns:
            - name: constant.language.boolean.true.mana
              match: '(?<!\.)\btrue\b'
            - name: constant.language.boolean.false.mana
              match: '(?<!\.)\bfalse\b'
    null-literal:
        name: constant.language.null.mana
        match: '(?<!\.)\bnull\b'
    numeric-literal:
        patterns:
            - name: constant.numeric.hex.mana
              match: '\b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
            - name: constant.numeric.binary.mana
              match: '\b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
            - name: constant.numeric.decimal.mana
              match: '\b([0-9_]+)?\.[0-9_]+((e|E)(\-?)[0-9]+)?(F|f|D|d|M|m|H|h)?\b'
            - name: constant.numeric.decimal.mana
              match: '\b[0-9_]+(e|E)(\-?)[0-9_]+(F|f|D|d|M|m|H|h)?\b'
            - name: constant.numeric.decimal.mana
              match: '\b[0-9_]+(F|f|D|d|M|m|H|h)\b'
            - name: constant.numeric.decimal.mana
              match: '\b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
            - name: constant.numeric.decimal.mana
              match: '\b(NaN|Infinity)\b'
    char-literal:
        name: string.quoted.single.mana
        begin: "'"
        beginCaptures:
            "0":
                name: punctuation.definition.char.begin.mana
        end: '(\'')|((?:[^\\\n])$)'
        endCaptures:
            "1":
                name: punctuation.definition.char.end.mana
            "2":
                name: invalid.illegal.newline.mana
        patterns:
            - include: "#char-character-escape"
    char-character-escape:
        name: constant.character.escape.mana
        match: '\\([''"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})'
    string-literal:
        name: string.quoted.double.mana
        begin: '(?<!@)"'
        beginCaptures:
            "0":
                name: punctuation.definition.string.begin.mana
        end: '(")|((?:[^\\\n])$)'
        endCaptures:
            "1":
                name: punctuation.definition.string.end.mana
            "2":
                name: invalid.illegal.newline.mana
        patterns:
            - include: "#string-character-escape"
    string-character-escape:
        name: constant.character.escape.mana
        match: '\\([''"\\0abfnrtv]|x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4})'
    object-creation-expression:
        patterns:
            - include: "#object-creation-with-parameters"
            - include: "#object-creation-expression-with-no-parameters"
    type:
        name: meta.type.mana
        patterns:
            - include: "#comment"
            - include: "#ref-modifier"
            - include: "#readonly-modifier"
            - include: "#type-builtin"
            - include: "#type-name"
            - include: "#type-arguments"
            - include: "#type-array-suffix"
    operation-declaration:
        begin: \b(operation)\s+(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)(?<template_key><(\S)>)?(\[.+?\]?)\s?+(->)\s?+(\S+)(\s?+(where)\s?+(\S+)\s?+(is)\s?+(struct|class))?
        beginCaptures:
            "1":
                name: keyword.control.mana
            "2":
                name: entity.name.function.mana
            "4":
                name: constant.numeric.generic.mana
            "5":
                patterns:
                    - include: "#operation-argument-list"
            "6":
                name: keyword.operator.mana
            "7":
                name: entity.name.type
            "9":
                name: keyword.type
            "10":
                name: constant.numeric.generic.mana
            "11":
                name: keyword.type
            "12":
                name: keyword.type
        end: '(?<=\})'
        patterns:
            - include: "#comment"
            - include: "#gc-modifier"
            - include: "#sync-modifier"
            - include: "#body-operation-statament"
    field-declaration:
        begin: "(?x)(?<typename>(?:(?:(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? (?<nameandtypeargs>\g<identifier>\s*(?<typeargs>\s*<(?:[^<>]|\g<typeargs>)+>\s*)?      )      (?:\s*\.\s*\g<nameandtypeargs>)* | (?<tuple>\s*\((?:[^\(\)]|\g<tuple>)+\)))(?:\s*\?\s*)? (?:\s*\[(?:\s*,\s*)*\]\s*)* ))\s+(\g<identifier>)\s* (?!=>|==)(?=,|;|=|$)"
        beginCaptures:
            "1":
                patterns:
                    - { include: "#type" }
            "6":
                name: entity.name.variable.field.mana
        end: "(?=;)"
        patterns:
            - name: entity.name.variable.field.mana
              match: "@?[_[:alpha:]][_[:alnum:]]*"
            - include: "#punctuation-comma"
            - include: "#comment"
            - include: "#variable-initializer"
            - include: "#class-or-struct-members"
    class-or-struct-members:
        patterns:
            - include: "#preprocessor"
            - include: "#comment"
            - include: "#storage-modifier"
            - include: "#type-declarations"
            - include: "#property-declaration"
            - include: "#field-declaration"
            - include: "#event-declaration"
            - include: "#indexer-declaration"
            - include: "#variable-initializer"
            - include: "#constructor-declaration"
            - include: "#destructor-declaration"
            - include: "#operator-declaration"
            - include: "#conversion-operator-declaration"
            - include: "#method-declaration"
            - include: "#attribute-section"
            - include: "#punctuation-semicolon"
    argument-list:
        begin: \(
        beginCaptures:
            "0":
                name: punctuation.parenthesis.open.mana
        end: \)
        endCaptures:
            "0":
                name: punctuation.parenthesis.close.mana
        patterns:
            - include: "#argument"
            - include: "#punctuation-comma"
    operation-argument-list:
        match: "((?<variable_name>[a-zA-Z0-9]+)\s?+\:\s?+(?<type_name>[a-zA-Z0-9]+))(,?)+"
        captures:
            "2":
                name: entity.name.variable.local.mana
            "3":
                name: entity.name.type
    declaration-expression-local:
        match: "((?<variable_name>[a-zA-Z0-9]+)\s?+\:\s?+(?<type_name>[a-zA-Z0-9]+))(,?)+"
        captures:
            "2":
                name: entity.name.variable.local.mana
            "3":
                name: entity.name.type
    argument:
        patterns:
            - name: storage.modifier.mana
              match: \b(ref|out|in)\b
            - include: "#declaration-expression-local"
    parenthesized-parameter-list:
        begin: (\()
        beginCaptures:
            "0":
                name: punctuation.parenthesis.open.mana
        end: (\))
        endCaptures:
            "0":
                name: punctuation.parenthesis.close.mana
        patterns:
            - include: "#comment"
            - include: "#attribute-section"
            - include: "#parameter"
            - include: "#punctuation-comma"
            - include: "#variable-initializer"
    attribute-section:
        begin: '(\[)(assembly|module|field|event|method|param|property|return|type)?(\:)?'
        beginCaptures:
            "1":
                name: punctuation.squarebracket.open.mana
            "2":
                name: keyword.other.attribute-specifier.mana
            "3":
                name: punctuation.separator.colon.mana
        end: '(\])'
        endCaptures:
            "1":
                name: punctuation.squarebracket.close.mana
        patterns:
            - include: "#comment"
            - include: "#attribute"
            - include: "#punctuation-comma"
    attribute:
        patterns:
            - include: "#type-name"
            - include: "#attribute-arguments"
    attribute-arguments:
        begin: (\()
        beginCaptures:
            "1":
                name: punctuation.parenthesis.open.mana
        end: (\))
        endCaptures:
            "1":
                name: punctuation.parenthesis.close.mana
        patterns:
            - include: "#attribute-named-argument"
            - include: "#expression"
            - include: "#punctuation-comma"
    gc-modifier:
        name: entity.operation.gc.mana
        match: (?x)(gc)\s+(((nocontrol|auto)\;))
        beginCaptures:
            "1":
                name: keyword.control.gc.mana
            "4":
                name: keyword.control.gc.mana
    sync-modifier:
        name: entity.operation.sync.mana
        match: (?x)(sync)\s+(((nocontrol|auto|inheritable)\;)|\{)
        beginCaptures:
            "1":
                name: keyword.control.sync.mana
            "4":
                name: keyword.control.sync.mana
    body-operation-statament:
        begin: \b(body)\s+
        beginCaptures:
            "1":
                name: keyword.control.body.mana
        end: '(?<=\})'
        patterns:
            - begin: '\{'
              beginCaptures:
                  "0": { name: punctuation.curlybrace.open.mana }
              end: '\}'
              endCaptures:
                  "0": { name: punctuation.curlybrace.close.mana }
              patterns:
                - include: "#literal"
                - include: "#interpolated-string"
                - include: "#comment"
                - include: "#punctuation-accessor"
                - include: "#parenthesized-parameter-list"
                - include: "#generic-constraints"
                - include: "#expression-body"
                - include: "#block"
                - include: "#type"
    object-creation-with-parameters:
        begin: "(new)\s+([_[:alpha:]][_[:alnum:]]*)(?=\()"
        beginCaptures:
            "1":
                name: keyword.other.new.mana
            "2":
                name: entity.name.type
                patterns:
                    - include: "#type"
        end: '(?<=\))'
        patterns:
            - include: "#argument-list"
